What happens when you initialize a repository? Why do you need to do it?
Ans.
A new .git folder is created but nothing is added to git tracking and metadata of files is not saved.
We need to tell git to initialize and later on track the folder for which it creates a hidden folder where it keeps all the
metadata related to the files tracked and commits and changes done to the tracked files and folders.
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Ans.
Staging area serves the purpose of making and separating the commits in logical steps. I may also have multiple files which
I may or may not want to add to the commit yet. This helps in making changes to the repository logically more controlled and
refined.
This allows only to add changes little at a time despite huge changes we might otherwise have made to the current working
system. Thereby testing our code in modular fashion and changing/rolling back in case of any bugs.

-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
How can you use the staging area to make sure you have one commit per logical change?
Ans.
We can add files which are logically linked to the changes we are making and only committing those to the repository at the
time of committing, despite having made other changes to the files as well.
Thereby observing one commit per logical change.
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Ans.
Testing and adding experinmental changes and features, Sorting bugs and other logical changes which I would not like to add
or test with a working copy of main or master branch.
It would be great help if I can make iterative changes to the tests and other changes that I want and be able to merge it
back in to main branch once I am confident of the changes that I have made.
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
How do the diagrams help you visualize the branch structure?

-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
What are the pros and cons of Git√¢ automatic merging vs. always doing merges
manually?

-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
